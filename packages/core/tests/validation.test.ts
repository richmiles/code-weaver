import { MessageValidator, ContextSourceValidator, SecurityValidator } from '../src/validation';\nimport { MessageType, SourceType } from '../src/types';\n\ndescribe('MessageValidator', () => {\n  describe('validateMessage', () => {\n    test('should validate a correct message', () => {\n      const message = {\n        type: MessageType.GET_SOURCES,\n        id: 'test-123',\n        timestamp: new Date()\n      };\n\n      const result = MessageValidator.validateMessage(message);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.data).toEqual(expect.objectContaining({\n        type: MessageType.GET_SOURCES,\n        id: 'test-123'\n      }));\n    });\n\n    test('should reject message with invalid type', () => {\n      const message = {\n        type: 'invalid_type',\n        id: 'test-123',\n        timestamp: new Date()\n      };\n\n      const result = MessageValidator.validateMessage(message);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors[0].code).toBe('INVALID_TYPE');\n    });\n\n    test('should reject message with missing required fields', () => {\n      const message = {\n        type: MessageType.GET_SOURCES\n        // Missing id and timestamp\n      };\n\n      const result = MessageValidator.validateMessage(message);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors).toHaveLength(2); // Missing id and timestamp\n    });\n\n    test('should reject message with timestamp too far in past', () => {\n      const message = {\n        type: MessageType.GET_SOURCES,\n        id: 'test-123',\n        timestamp: new Date(Date.now() - 25 * 60 * 60 * 1000) // 25 hours ago\n      };\n\n      const result = MessageValidator.validateMessage(message);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'TIMESTAMP_TOO_OLD')).toBe(true);\n    });\n\n    test('should reject message with timestamp in future', () => {\n      const message = {\n        type: MessageType.GET_SOURCES,\n        id: 'test-123',\n        timestamp: new Date(Date.now() + 2 * 60 * 60 * 1000) // 2 hours in future\n      };\n\n      const result = MessageValidator.validateMessage(message);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'TIMESTAMP_TOO_NEW')).toBe(true);\n    });\n  });\n\n  describe('validatePayload', () => {\n    test('should validate ADD_SOURCE payload', () => {\n      const payload = {\n        type: SourceType.FILE,\n        name: 'test.ts',\n        path: '/path/to/test.ts'\n      };\n\n      const result = MessageValidator.validatePayload(MessageType.ADD_SOURCE, payload);\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject ADD_SOURCE with missing name', () => {\n      const payload = {\n        type: SourceType.FILE,\n        path: '/path/to/test.ts'\n        // Missing name\n      };\n\n      const result = MessageValidator.validatePayload(MessageType.ADD_SOURCE, payload);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.field === 'payload.name')).toBe(true);\n    });\n\n    test('should validate SEARCH_FILES payload', () => {\n      const payload = {\n        query: 'test',\n        maxResults: 50\n      };\n\n      const result = MessageValidator.validatePayload(MessageType.SEARCH_FILES, payload);\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject SEARCH_FILES with invalid maxResults', () => {\n      const payload = {\n        query: 'test',\n        maxResults: 5000 // Too high\n      };\n\n      const result = MessageValidator.validatePayload(MessageType.SEARCH_FILES, payload);\n      \n      expect(result.isValid).toBe(false);\n    });\n  });\n});\n\ndescribe('ContextSourceValidator', () => {\n  describe('validateContextSource', () => {\n    test('should validate a correct file source', () => {\n      const source = {\n        id: 'source-123',\n        type: SourceType.FILE,\n        name: 'test.ts',\n        path: '/workspace/test.ts',\n        enabled: true,\n        createdAt: new Date(),\n        updatedAt: new Date()\n      };\n\n      const result = ContextSourceValidator.validateContextSource(source);\n      \n      expect(result.isValid).toBe(true);\n      expect(result.data).toEqual(source);\n    });\n\n    test('should reject source with invalid type', () => {\n      const source = {\n        type: 'invalid_type',\n        name: 'test.ts'\n      };\n\n      const result = ContextSourceValidator.validateContextSource(source);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'INVALID_TYPE')).toBe(true);\n    });\n\n    test('should validate snippet source with content', () => {\n      const source = {\n        type: SourceType.SNIPPET,\n        name: 'Test snippet',\n        content: 'console.log(\"test\");'\n      };\n\n      const result = ContextSourceValidator.validateContextSource(source);\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject snippet source with oversized content', () => {\n      const largeContent = 'x'.repeat(101 * 1024); // > 100KB\n      const source = {\n        type: SourceType.SNIPPET,\n        name: 'Large snippet',\n        content: largeContent\n      };\n\n      const result = ContextSourceValidator.validateContextSource(source);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'CONTENT_TOO_LARGE')).toBe(true);\n    });\n\n    test('should validate group source', () => {\n      const source = {\n        type: SourceType.GROUP,\n        name: 'Test group',\n        sourceIds: ['source1', 'source2', 'source3']\n      };\n\n      const result = ContextSourceValidator.validateContextSource(source);\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject empty group source', () => {\n      const source = {\n        type: SourceType.GROUP,\n        name: 'Empty group',\n        sourceIds: []\n      };\n\n      const result = ContextSourceValidator.validateContextSource(source);\n      \n      expect(result.isValid).toBe(false);\n    });\n  });\n\n  describe('validatePath', () => {\n    test('should accept valid workspace path', () => {\n      const result = ContextSourceValidator.validatePath('/workspace/src/app.ts');\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject path traversal attempt', () => {\n      const result = ContextSourceValidator.validatePath('/workspace/../../../etc/passwd');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'PATH_TRAVERSAL')).toBe(true);\n    });\n\n    test('should reject suspicious system paths', () => {\n      const result = ContextSourceValidator.validatePath('/etc/passwd');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'SUSPICIOUS_PATH')).toBe(true);\n    });\n\n    test('should reject null byte injection', () => {\n      const result = ContextSourceValidator.validatePath('/workspace/file\\0.txt');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'NULL_BYTE')).toBe(true);\n    });\n  });\n});\n\ndescribe('SecurityValidator', () => {\n  describe('validateFileAccess', () => {\n    test('should allow access to workspace files', () => {\n      const result = SecurityValidator.validateFileAccess('/workspace/src/app.ts');\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should block access to system directories', () => {\n      const result = SecurityValidator.validateFileAccess('/etc/passwd');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'FORBIDDEN_DIRECTORY')).toBe(true);\n    });\n\n    test('should block executable files', () => {\n      const result = SecurityValidator.validateFileAccess('/workspace/script.exe');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'RESTRICTED_EXTENSION')).toBe(true);\n    });\n\n    test('should detect path traversal attempts', () => {\n      const result = SecurityValidator.validateFileAccess('/workspace/../../../secret.txt');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'PATH_TRAVERSAL')).toBe(true);\n    });\n  });\n\n  describe('validateFileContent', () => {\n    test('should accept normal file content', () => {\n      const content = 'console.log(\"Hello, world!\");';\n      const result = SecurityValidator.validateFileContent(content, 'app.js');\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should detect potential secrets', () => {\n      const content = 'const apiKey = \"sk_test_abc123xyz\";';\n      const result = SecurityValidator.validateFileContent(content, 'config.js');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'POTENTIAL_SECRET')).toBe(true);\n    });\n\n    test('should detect suspicious code patterns', () => {\n      const content = 'eval(userInput);';\n      const result = SecurityValidator.validateFileContent(content, 'app.js');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'SUSPICIOUS_CODE')).toBe(true);\n    });\n\n    test('should reject oversized files', () => {\n      const largeContent = 'x'.repeat(51 * 1024 * 1024); // > 50MB\n      const result = SecurityValidator.validateFileContent(largeContent);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'FILE_TOO_LARGE')).toBe(true);\n    });\n  });\n\n  describe('validateSearchQuery', () => {\n    test('should accept normal search queries', () => {\n      const result = SecurityValidator.validateSearchQuery('function test');\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject oversized queries', () => {\n      const longQuery = 'x'.repeat(300);\n      const result = SecurityValidator.validateSearchQuery(longQuery);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'QUERY_TOO_LONG')).toBe(true);\n    });\n\n    test('should detect regex injection attempts', () => {\n      const result = SecurityValidator.validateSearchQuery('(?#comment)test');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'REGEX_INJECTION')).toBe(true);\n    });\n\n    test('should detect command injection attempts', () => {\n      const result = SecurityValidator.validateSearchQuery('test; rm -rf /');\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'COMMAND_INJECTION')).toBe(true);\n    });\n  });\n\n  describe('validateOperationLimits', () => {\n    test('should accept reasonable operation limits', () => {\n      const operation = {\n        fileCount: 100,\n        maxDepth: 5,\n        maxResults: 1000\n      };\n      \n      const result = SecurityValidator.validateOperationLimits(operation);\n      \n      expect(result.isValid).toBe(true);\n    });\n\n    test('should reject excessive file counts', () => {\n      const operation = {\n        fileCount: 5000 // Too many\n      };\n      \n      const result = SecurityValidator.validateOperationLimits(operation);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'TOO_MANY_FILES')).toBe(true);\n    });\n\n    test('should reject excessive depth', () => {\n      const operation = {\n        maxDepth: 25 // Too deep\n      };\n      \n      const result = SecurityValidator.validateOperationLimits(operation);\n      \n      expect(result.isValid).toBe(false);\n      expect(result.errors.some(e => e.code === 'DEPTH_TOO_HIGH')).toBe(true);\n    });\n  });\n});